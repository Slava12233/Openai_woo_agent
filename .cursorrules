# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

You should also use the `.cursorrules` file as a Scratchpad to organize your thoughts. Especially when you receive a new task, you should first review the content of the Scratchpad, clear old different task if necessary, first explain the task, and plan the steps you need to take to complete the task. You can use todo markers to indicate the progress, e.g.
[X] Task 1
[ ] Task 2

Also update the progress of the task in the Scratchpad when you finish a subtask.
Especially when you finished a milestone, it will help to improve your depth of task accomplishment to use the Scratchpad to reflect and plan.
The goal is to help you maintain a big picture as well as the progress of the task. Always refer to the Scratchpad when you plan the next step.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification

The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot

screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM

response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
venv/bin/python ./tools/llm_api.py --prompt "What is the capital of France?" --provider "anthropic"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Azure OpenAI (model: configured via AZURE_OPENAI_MODEL_DEPLOYMENT in .env file, defaults to gpt-4o-ms)
- DeepSeek (model: deepseek-chat)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)
- Local LLM (model: Qwen/Qwen2.5-32B-Instruct-AWQ)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
venv/bin/python ./tools/web_scraper.py --max-concurrent 3 URL1 URL2 URL3
```
This will output the content of the web pages.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

# Lessons

## User Specified Lessons

- You have a python venv in ./venv. Use it.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Due to Cursor's limit, when you use `git` and `gh` and need to submit a multiline commit message, first write the message in a file, and then use `git commit -F <filename>` or similar command to commit. And then remove the file. Include "[Cursor] " in the commit message and PR title.
- יש להשתמש ב-SDK של OpenAI Agents לניהול סוכנים במקום לממש את הלוגיקה בעצמנו
- בגרסה 0.0.4 של ספריית openai-agents, הפונקציות Runner.run ו-Runner.run_streamed מחזירות coroutine שצריך לעשות לו await, והתוצאה מכילה את השדה final_output ולא output
- בעת שימוש בפונקציה function_tool בספריית openai-agents בגרסה 0.0.4, יש לעטוף את הפונקציות הרגילות בפונקציות אסינכרוניות ולהגדיר את שם הפונקציה באמצעות __name__ במקום להשתמש בפרמטר name שאינו נתמך
- בעת הגדרת model_settings בספריית openai-agents, יש להשתמש באובייקט ModelSettings ולא במילון רגיל, אחרת תתקבל שגיאה 'dict' object has no attribute 'resolve'
- בעת הגדרת כלים בספריית openai-agents, יש לוודא שכל פונקציה אסינכרונית מוגדרת נכון ושהפונקציה מחזירה ערך תקין. יש להקפיד על טיפול בשגיאות בתוך הפונקציה כדי למנוע קריסה של הסוכן.
- בעת הגדרת כלים בספריית openai-agents, יש להגדיר כל כלי כפונקציה נפרדת עם חתימה מפורשת הכוללת טיפוסים מדויקים לכל פרמטר. אין להשתמש בפונקציות דינמיות שנוצרות בלולאה, אלא להגדיר כל פונקציה בנפרד עם הדקורטור @function_tool.
- בגרסה 0.0.4 של ספריית openai-agents, הפונקציה Runner.run לא מקבלת פרמטר messages להעברת היסטוריית שיחה. במקום זאת, יש לשלב את היסטוריית השיחה בתוך ההודעה עצמה כטקסט.
- בעת עבודה עם מסד נתונים, חשוב לטפל בשגיאות התחברות ולספק מנגנון גיבוי (fallback) במקרה של כשל.
- שימוש ב-SQLAlchemy מפשט את העבודה עם מסד הנתונים ומאפשר החלפה קלה של סוג מסד הנתונים בעתיד.
- מנגנון ניקוי תקופתי חשוב למניעת גידול לא מבוקר של מסד הנתונים.
- בעת פיתוח ממשק משתמש בעברית, יש להקפיד על תמיכה מלאה ב-RTL (כיוון טקסט מימין לשמאל) ולהשתמש בפונטים המתאימים לעברית.
- בעת שימוש ב-Tailwind CSS, יש להגדיר את הצבעים והסגנונות הבסיסיים בקובץ tailwind.config.js כדי לשמור על אחידות בעיצוב.
- בעת יצירת טפסים, יש להוסיף ולידציה מתאימה לשדות הקלט ולהציג הודעות שגיאה ברורות למשתמש.

## Cursor learned

- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- Use 'gpt-4o' as the model name for OpenAI's GPT-4 with vision capabilities
- When searching for recent news, use the current year (2025) instead of previous years, or simply use the "recent" keyword to get the latest information
- בעת פיתוח אפליקציית Next.js, יש להשתמש ב-'use client' בראש הקובץ עבור קומפוננטות שמשתמשות בהוקים של React או באינטראקציות משתמש
- בעת עבודה עם טפסים בעברית, יש להגדיר את כיוון הטקסט כ-RTL ולהתאים את העיצוב בהתאם

# Scratchpad

## תוכנית פיתוח ממשק משתמש - WooCommerce AI Agent SaaS

### מטרת המערכת
יצירת ממשק פשוט, נקי וידידותי שבו "דני", בונה החנויות, יכול ליצור, לנהל ולשתף סוכנים עבור הלקוחות שלו בקלות ובמהירות.

### שלבי פיתוח הממשק

#### שלב 1: הקמת תשתית הפרויקט
- [X] יצירת פרויקט Next.js עם Tailwind CSS
- [X] הגדרת מבנה תיקיות לפי האפיון
- [X] הגדרת צבעים וטיפוגרפיה בסיסית ב-Tailwind
- [X] יצירת קומפוננטות UI בסיסיות (כפתורים, שדות קלט)

#### שלב 2: פיתוח מסך התחברות (Login)
- [X] עיצוב מסך התחברות נקי ומינימליסטי
- [X] יצירת טופס התחברות עם שדות שם משתמש וסיסמה
- [X] הוספת ולידציה לשדות הטופס
- [X] חיבור הטופס ל-API להתחברות (מדומה בשלב זה)
- [X] הוספת הודעות שגיאה והצלחה
- [X] הוספת לינק "שכחת סיסמה" (לא פעיל בשלב זה)

#### שלב 3: פיתוח דף הבית - Dashboard ראשי
- [X] יצירת מבנה בסיסי עם בר עליון ותפריט צד
- [X] הוספת כפתור בולט "יצירת סוכן חדש"
- [X] יצירת טבלת סוכנים פעילים עם העמודות:
  - [X] שם הסוכן
  - [X] כתובת חנות (URL)
  - [X] פלטפורמת תקשורת (טלגרם/ווצאפ)
  - [X] סטטוס (פעיל/לא פעיל)
  - [X] כפתורי פעולה (העתק לינק, עריכה, מחיקה)
- [X] הוספת פונקציונליות לכפתורי הפעולה
- [X] הוספת אפשרות סינון וחיפוש בטבלה

#### שלב 4: פיתוח מסך יצירת סוכן חדש
- [X] יצירת ממשק Wizard עם שלושה שלבים
- [X] הוספת ולידציה לכל שלב
- [X] הוספת אינדיקטור התקדמות
- [X] חיבור הטופס ל-API ליצירת סוכן חדש (מדומה בשלב זה)
- [X] הוספת הודעות שגיאה והצלחה

#### שלב 5: פיתוח מסך עריכת סוכן קיים
- [X] שכפול מסך יצירת סוכן עם התאמות לעריכה
- [X] טעינת נתוני הסוכן הקיים מה-API (מדומה בשלב זה)
- [X] הוספת אפשרות לשמירת שינויים
- [X] הוספת אפשרות לביטול שינויים

#### שלב 6: פיתוח מסך הגדרות
- [X] יצירת טופס לשינוי פרטי משתמש (שם משתמש, סיסמה)
- [X] הוספת אפשרות לריקון זיכרון (cache)
- [X] הוספת אפשרות להחלפת API Keys של OpenAI
- [X] חיבור הטופס ל-API לעדכון הגדרות (מדומה בשלב זה)

#### שלב 7: פיתוח מסך מדריכים ותמיכה
- [X] יצירת עמוד עם מדריכי וידאו מוטמעים
- [X] הוספת מדריך טקסטואלי "איך ליצור סוכן ללקוחות"
- [X] הוספת שאלות נפוצות (FAQ)
- [X] הוספת טופס יצירת קשר לתמיכה

#### שלב 8: פיתוח מסך הרשמה (אופציונלי)
- [ ] יצירת טופס הרשמה עם השדות הנדרשים
- [ ] הוספת ולידציה לשדות הטופס
- [ ] חיבור הטופס ל-API להרשמה
- [ ] הוספת הודעות שגיאה והצלחה

#### שלב 9: אינטגרציה וטיפול בשגיאות
- [X] חיבור כל המסכים ל-API (מדומה בשלב זה)
- [X] הוספת טיפול בשגיאות רשת
- [X] הוספת מצבי טעינה (loading states)
- [X] הוספת הודעות משוב למשתמש

#### שלב 10: בדיקות ושיפורים
- [X] בדיקות פונקציונליות לכל המסכים
- [ ] בדיקות תאימות לדפדפנים שונים
- [ ] בדיקות רספונסיביות למכשירים שונים
- [ ] שיפורים בחווית המשתמש לפי משוב

### סיכום התקדמות
- [X] הושלמו שלבים 1-7 ו-9 במלואם
- [X] הושלם חלק משלב 10 (בדיקות פונקציונליות)
- [ ] נותר להשלים את שלב 8 (מסך הרשמה - אופציונלי) וחלקים משלב 10 (בדיקות נוספות ושיפורים)

### הערות
- יש להשתמש בספריית Tailwind CSS לעיצוב
- יש להקפיד על תמיכה בעברית ובכיוון RTL
- יש להשתמש בצבעים שהוגדרו בקובץ tailwind.config.js

## תוכנית שדרוג הדאשבורד - הוספת אלמנטים טכנולוגיים מתקדמים

### מטרת השדרוג
הפיכת הדאשבורד לחדשני, טכנולוגי ואינטראקטיבי יותר, תוך שמירה על פשטות השימוש והנגישות למשתמש.

### שלבי פיתוח השדרוגים

#### שלב 1: הוספת חלונית לוגים Real-Time לכל סוכן
- [X] יצירת קומפוננטת LogPanel מתקפלת לכל שורת סוכן
- [X] עיצוב חלונית הלוגים עם אנימציית פתיחה וסגירה חלקה
- [X] הוספת מערכת הצגת לוגים בזמן אמת עם:
  - [X] חותמת זמן
  - [X] סוג הפעולה (אייקון + טקסט)
  - [X] תיאור קצר של הפעולה
  - [X] סטטוס (הצלחה/כישלון)
- [X] יצירת API מדומה להזנת נתוני לוגים בזמן אמת
- [X] הוספת אפשרות לסינון לוגים לפי סוג פעולה
- [X] הוספת כפתור "נקה לוגים" ו"ייצא לוגים"

#### שלב 2: פיתוח מצב דמו חי (Live Demo Mode)
- [ ] יצירת קומפוננטת LiveDemo כפופ-אפ או חלונית נפרדת
- [ ] פיתוח אנימציית הדמיה של שיחה בין משתמש לסוכן:
  - [ ] הצגת הודעות מתקבלות בהדרגה (אפקט הקלדה)
  - [ ] הצגת תגובות הסוכן עם אפקט "חושב..."
  - [ ] הוספת אייקונים ואמוג'ים רלוונטיים
- [ ] יצירת תסריטי דמו מובנים לפי סוגי סוכנים שונים
- [ ] הוספת כפתור "הפעל דמו" בכל שורת סוכן
- [ ] אפשרות להתאמה אישית של תסריט הדמו


#### שלב 4: פיתוח תגיות פעילות חכמות
- [ ] יצירת קומפוננטת SmartBadge דינמית
- [ ] הוספת לוגיקה לעדכון אוטומטי של תגיות לפי נתוני פעילות:
  - [ ] 🟢 פעיל (X אינטראקציות היום)
  - [ ] 🟠 פעיל חלקית (לא פעיל בX שעות האחרונות)
  - [ ] 🔴 לא פעיל (לא פעיל בX ימים האחרונים)
- [ ] הוספת אפקט Pulse לתגיות פעילות
- [ ] יצירת מערכת התראות על שינויי סטטוס

#### שלב 5: הוספת גרפים ויזואליים קטנים
- [ ] שילוב ספריית Chart.js או Recharts
- [ ] יצירת קומפוננטת MiniChart לכל סוכן:
  - [ ] גרף קו קטן לאינטראקציות שבועיות
  - [ ] גרף עוגה קטן לסוגי פעולות
  - [ ] גרף עמודות קטן להשוואת ביצועים
- [ ] הוספת אינטראקטיביות לגרפים (מעבר עכבר, זום)
- [ ] יצירת דאשבורד אנליטיקס מורחב (נפתח בלחיצה)

#### שלב 6: פיתוח כפתור "צפייה בלייב"
- [ ] יצירת קומפוננטת LiveView כחלונית או מסך מלא
- [ ] פיתוח ממשק צ'אט אינטראקטיבי:
  - [ ] הצגת הודעות נכנסות ויוצאות בזמן אמת
  - [ ] אפשרות להתערבות ידנית במקרה הצורך
  - [ ] הצגת מידע על תהליך החשיבה של הסוכן
- [ ] הוספת אפשרות להקלטת ושמירת שיחות לצורכי למידה

#### שלב 7: הוספת תצוגת "טכנולוגיות בשימוש"
- [ ] יצירת קומפוננטת TechStack בתחתית הדאשבורד
- [ ] הוספת אייקונים אינטראקטיביים של טכנולוגיות:
  - [ ] OpenAI 🧠
  - [ ] WooCommerce 🛒
  - [ ] Telegram/WhatsApp 💬
  - [ ] Next.js ⚛️
  - [ ] Python 🐍
- [ ] הוספת Tooltips עם מידע על כל טכנולוגיה
- [ ] אנימציית Glow סביב הטכנולוגיה הפעילה כרגע

#### שלב 8: הוספת Dark Mode Toggle
- [ ] יצירת מערכת תמות (Theme System)
- [ ] פיתוח מתג Dark/Light Mode עם אנימציית החלפה
- [ ] התאמת כל הקומפוננטות לתמיכה בשתי התמות
- [ ] שמירת העדפת המשתמש ב-localStorage

#### שלב 9: פיתוח מערכת התראות Real-Time
- [ ] יצירת קומפוננטת NotificationCenter
- [ ] פיתוח מערכת התראות צפות:
  - [ ] התראות על פעילות חריגה
  - [ ] התראות על הצלחות ושגיאות
  - [ ] התראות על עדכוני מערכת
- [ ] הוספת אפשרות לסינון והגדרת התראות
- [ ] שמירת היסטוריית התראות

#### שלב 10: הוספת אזור "פעולות מהירות"
- [ ] יצירת קומפוננטת QuickActions כסרגל כלים צף
- [ ] הוספת פעולות מהירות שימושיות:
  - [ ] "הפעל מחדש את כל הסוכנים"
  - [ ] "נקה זיכרון סוכנים"
  - [ ] "צור דוח אינטראקציות"
  - [ ] "בדוק עדכוני מערכת"
- [ ] הוספת אפשרות להתאמה אישית של פעולות מהירות
- [ ] יצירת קיצורי מקלדת לפעולות נפוצות

### סיכום תוכנית השדרוג
- [X] הושלם שלב 1 (חלונית לוגים Real-Time)
- [ ] נותרו שלבים 2-10 לביצוע
- [ ] מומלץ להמשיך לשלב 2 (מצב דמו חי) או שלב 3 (אנימציות והדגשות UI)

### הערות טכניות
- יש להשתמש בספריות React מתקדמות כמו Framer Motion לאנימציות
- יש לשמור על ביצועים טובים ולהימנע מעומס יתר על הדפדפן
- יש להקפיד על תמיכה בעברית ובכיוון RTL בכל השדרוגים
- יש לשמור על נגישות (accessibility) בכל האלמנטים החדשים
- יש לתכנן את הממשק כך שיהיה רספונסיבי ויעבוד היטב גם במכשירים ניידים